services:
  # web:
  #   image: nginx:alpine
  #   container_name: integral-ecology-web
  #   restart: unless-stopped
  #   ports:
  #     - "8080:80"
  #   volumes:
  #     - ./demo_site:/usr/share/nginx/html:ro

  rabbitmq:
    image: rabbitmq:3-management
    container_name: etl-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"

  celery-beat:
    image: python:3.9-slim
    container_name: celery-beat
    restart: unless-stopped
    environment:
      - PIP_ROOT_USER_ACTION=ignore
    command: bash -c "pip install --disable-pip-version-check --upgrade 'pip<24.1' && pip install --disable-pip-version-check -r /app/api/requirements.txt -r /app/etl/requirements.txt && celery -A etl.etl_tasks beat --loglevel=info"
    working_dir: /app
    volumes:
      - ./:/app
    depends_on:
      - rabbitmq

  solr:
    image: solr:9.8 # pin to 9.8 for knn_text_to_vector
    container_name: integral-ecology-solr
    restart: unless-stopped
    ports:
      - "8983:8983"
    volumes:
      - solr_data:/var/solr # data directory
      - ./solr_config:/opt/solr/server/solr/configsets/integral_ecology_conf
    command:
      - solr-precreate
      - ecology  # name of the core
      - /opt/solr/server/solr/configsets/integral_ecology_conf # config
    environment:
      - SOLR_JAVA_MEM=-Xms2g -Xmx2g # for tuning JVM

  frontend:
    build:
      context: ./frontend
      args:
        - NEXT_PUBLIC_API_URL=http://api:8000
      dockerfile: Dockerfile
    container_name: integral-ecology-frontend
    restart: unless-stopped
    depends_on:
      - api
      - solr
    environment:
      - API_URL=http://api:8000
      - NEXT_PUBLIC_API_URL=http://api:8000
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    ports:
      - "3000:3000"

  celery-worker:
    image: python:3.9-slim
    container_name: celery-worker
    restart: unless-stopped
    environment:
      - PIP_ROOT_USER_ACTION=ignore
    command: bash -c "pip install --disable-pip-version-check --upgrade 'pip<24.1' && pip install --disable-pip-version-check -r /app/api/requirements.txt -r /app/etl/requirements.txt && celery -A etl.etl_tasks worker --loglevel=info"
    working_dir: /app
    volumes:
      - ./:/app
    depends_on:
      - rabbitmq

  flower:
    # force amd64 on arm64 hosts to avoid platform mismatch errors
    platform: linux/amd64
    image: mher/flower:0.9.7
    container_name: celery-flower
    restart: unless-stopped
    environment:
      - PIP_ROOT_USER_ACTION=ignore
    working_dir: /app
    volumes:
      - ./:/app
    command: bash -c "pip install --disable-pip-version-check --upgrade 'pip<24.1' && pip install --disable-pip-version-check -r /app/api/requirements.txt -r /app/etl/requirements.txt && flower -A etl.etl_tasks --broker=amqp://guest:guest@rabbitmq:5672// --port=5555"
    ports:
      - "5555:5555"
    depends_on:
      - rabbitmq
      - celery-worker

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
      args:
        - DOCKER_BUILDKIT=1
    # The Dockerfile defines WORKDIR and CMD for running the FastAPI app
    # working_dir and command are now inherited from the image
    container_name: integral-ecology-api
    restart: unless-stopped      
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:5432/${DB_NAME}
      - HF_HOME=/opt/models
    ports:
      - "8000:8000"
    volumes:
      - ./hf_models:/opt/models

  db:
    image: postgres:14-alpine
    container_name: integral-ecology-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
      - loki
    ports:
      - "4000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: "admin"
    volumes:
      - grafana_data:/var/lib/grafana

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    platform: linux/arm64
    container_name: cadvisor
    restart: unless-stopped
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /sys:/sys:ro
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8081:8080"

  loki:
    image: grafana/loki:2.8.2
    platform: linux/amd64
    user: root
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
      - loki_wal:/wal

  promtail:
    image: grafana/promtail:2.8.2
    container_name: promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log
      - ./monitoring/promtail-config.yaml:/etc/promtail/promtail-config.yml:ro
    command: -config.file=/etc/promtail/promtail-config.yml

volumes:
  db_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  loki_wal:
    driver: local
  solr_data:
    driver: local
  transformer_cache:
    driver: local
